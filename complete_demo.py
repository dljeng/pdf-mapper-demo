"""
ÂÆåÊï¥ÁöÑPDFÊò†Â∞ÑÂô®ÊºîÁ§∫Á®ãÂ∫è
Â±ïÁ§∫ÊâÄÊúâÊ†∏ÂøÉÂäüËÉΩÔºåÈÅ©ÂêàÁî®ÊñºÊáâÂæµÂ±ïÁ§∫
"""

import json
import os
import re
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List

# Â∞éÂÖ•Â∑≤ÂÆâË£ùÁöÑÂ∫´
try:
    import yaml
    HAS_YAML = True
except ImportError:
    HAS_YAML = False
    print("‚ö†Ô∏è PyYAMLÊú™ÂÆâË£ùÔºå‰ΩøÁî®JSONÈÖçÁΩÆ")

from PyPDF2 import PdfReader
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from loguru import logger
import jsonschema


class ProfessionalPDFMapper:
    """Â∞àÊ•≠Á¥öPDFÂ≠óÊÆµÊò†Â∞ÑÂô® - Â±ïÁ§∫ÁâàÊú¨"""
    
    def __init__(self, config_path: str = None):
        """ÂàùÂßãÂåñPDFÊò†Â∞ÑÂô®"""
        self.project_root = Path(__file__).parent
        self.config_path = config_path or self.project_root / "config" / "mapping_rules.json"
        self.mapping_rules = self._load_mapping_rules()
        self.validation_errors = []
        
        # Ë®≠ÁΩÆÊó•Ë™å
        self._setup_logging()
        
        # Á¢∫‰øùÂøÖË¶ÅÁõÆÈåÑÂ≠òÂú®
        self._ensure_directories()
        
        logger.info("üöÄ Â∞àÊ•≠Á¥öPDFÊò†Â∞ÑÂô®ÂàùÂßãÂåñÂÆåÊàê")
        print("‚úÖ PDFÊò†Â∞ÑÂô®ÂàùÂßãÂåñÊàêÂäü")
    
    def _setup_logging(self):
        """Ë®≠ÁΩÆÊó•Ë™åÁ≥ªÁµ±"""
        log_dir = self.project_root / "logs"
        log_dir.mkdir(exist_ok=True)
        
        logger.add(
            log_dir / "pdf_mapper.log",
            rotation="1 MB",
            level="DEBUG",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
            encoding="utf-8"
        )
    
    def _ensure_directories(self):
        """Á¢∫‰øùÂøÖË¶ÅÁõÆÈåÑÂ≠òÂú®"""
        directories = [
            "config", "data/input", "data/output", "data/sample", 
            "logs", "templates/pdf", "templates/mapping"
        ]
        
        for dir_path in directories:
            (self.project_root / dir_path).mkdir(parents=True, exist_ok=True)
    
    def _load_mapping_rules(self) -> Dict[str, Any]:
        """ËºâÂÖ•Êò†Â∞ÑË¶èÂâáÈÖçÁΩÆ"""
        try:
            if self.config_path.exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    if HAS_YAML and self.config_path.suffix == '.yaml':
                        rules = yaml.safe_load(f)
                    else:
                        rules = json.load(f)
                    
                    logger.info(f"ÊàêÂäüËºâÂÖ•Êò†Â∞ÑË¶èÂâá: {self.config_path}")
                    return rules
            else:
                logger.warning("Êò†Â∞ÑË¶èÂâáÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂâµÂª∫ÈªòË™çÈÖçÁΩÆ")
                return self._create_default_mapping_rules()
        except Exception as e:
            logger.error(f"ËºâÂÖ•Êò†Â∞ÑË¶èÂâáÂ§±Êïó: {e}")
            return self._create_default_mapping_rules()
    
    def _create_default_mapping_rules(self) -> Dict[str, Any]:
        """ÂâµÂª∫ÈªòË™çÊò†Â∞ÑË¶èÂâá"""
        default_rules = {
            "version": "1.0",
            "description": "Â∞àÊ•≠PDFË°®ÂñÆÂ≠óÊÆµÊò†Â∞ÑË¶èÂâá",
            "author": "PDF Mapper Demo",
            "created_date": datetime.now().isoformat(),
            
            "templates": {
                "medical_form": {
                    "description": "ÈÜ´ÁôÇË°®ÂñÆÊ®°Êùø",
                    "category": "healthcare",
                    "hipaa_compliant": True,
                    "fields": {
                        "patient_name": {
                            "type": "text",
                            "required": True,
                            "max_length": 50,
                            "validation_pattern": "^[a-zA-Z\\s\\u4e00-\\u9fff]+$",
                            "description": "ÊÇ£ËÄÖÂßìÂêç",
                            "example": "ÂºµÂ§ßÊòé"
                        },
                        "patient_id": {
                            "type": "text", 
                            "required": True,
                            "max_length": 20,
                            "validation_pattern": "^[A-Z0-9]+$",
                            "description": "ÊÇ£ËÄÖID",
                            "example": "P12345"
                        },
                        "date_of_birth": {
                            "type": "date",
                            "required": True,
                            "format": "YYYY-MM-DD",
                            "description": "Âá∫ÁîüÊó•Êúü",
                            "example": "1990-01-15"
                        },
                        "gender": {
                            "type": "select",
                            "required": True,
                            "options": ["Male", "Female", "Other", "Prefer not to say"],
                            "description": "ÊÄßÂà•",
                            "example": "Male"
                        },
                        "emergency_contact": {
                            "type": "boolean",
                            "required": False,
                            "description": "ÊòØÂê¶ÊúâÁ∑äÊÄ•ËÅØÁµ°‰∫∫",
                            "example": True
                        },
                        "phone": {
                            "type": "phone",
                            "required": False,
                            "max_length": 20,
                            "validation_pattern": "^[0-9\\-\\+\\s\\(\\)]+$",
                            "description": "ÈõªË©±ËôüÁ¢º",
                            "example": "+886-2-1234-5678"
                        },
                        "address": {
                            "type": "textarea",
                            "required": False,
                            "max_length": 200,
                            "description": "Â±Ö‰ΩèÂú∞ÂùÄ",
                            "example": "Âè∞ÂåóÂ∏Ç‰ø°Áæ©ÂçÄ‰ø°Áæ©Ë∑Ø‰∫îÊÆµ7Ëôü"
                        },
                        "insurance_id": {
                            "type": "text",
                            "required": False,
                            "max_length": 30,
                            "description": "‰øùÈö™Á∑®Ëôü",
                            "example": "INS987654321"
                        }
                    }
                },
                
                "employee_form": {
                    "description": "Âì°Â∑•Ë≥áÊñôË°®ÂñÆ",
                    "category": "hr",
                    "gdpr_compliant": True,
                    "fields": {
                        "employee_name": {
                            "type": "text",
                            "required": True,
                            "max_length": 60,
                            "description": "Âì°Â∑•ÂßìÂêç",
                            "example": "ÊùéÂ∞èËèØ"
                        },
                        "employee_id": {
                            "type": "text",
                            "required": True,
                            "max_length": 15,
                            "validation_pattern": "^EMP[0-9]{4,8}$",
                            "description": "Âì°Â∑•Á∑®Ëôü",
                            "example": "EMP12345"
                        },
                        "department": {
                            "type": "select",
                            "required": True,
                            "options": ["IT", "HR", "Finance", "Marketing", "Sales", "Operations"],
                            "description": "ÈÉ®ÈñÄ",
                            "example": "IT"
                        },
                        "position": {
                            "type": "text",
                            "required": True,
                            "max_length": 50,
                            "description": "ËÅ∑‰Ωç",
                            "example": "Senior Developer"
                        },
                        "hire_date": {
                            "type": "date",
                            "required": True,
                            "format": "YYYY-MM-DD",
                            "description": "ÂÖ•ËÅ∑Êó•Êúü",
                            "example": "2024-01-15"
                        },
                        "salary": {
                            "type": "number",
                            "required": False,
                            "min_value": 0,
                            "max_value": 10000000,
                            "description": "Ëñ™Ë≥á",
                            "example": 80000
                        },
                        "remote_work": {
                            "type": "boolean",
                            "required": False,
                            "description": "ÊòØÂê¶ÂèØÈÅ†Á®ãÂ∑•‰Ωú",
                            "example": True
                        }
                    }
                }
            },
            
            "validation_schema": {
                "type": "object",
                "properties": {
                    "version": {"type": "string"},
                    "templates": {
                        "type": "object",
                        "patternProperties": {
                            ".*": {
                                "type": "object",
                                "required": ["description", "fields"],
                                "properties": {
                                    "description": {"type": "string"},
                                    "fields": {"type": "object"}
                                }
                            }
                        }
                    }
                }
            },
            
            "settings": {
                "hipaa_compliance": True,
                "gdpr_compliance": True,
                "log_access": True,
                "encrypt_output": False,
                "audit_trail": True,
                "max_file_size_mb": 50
            }
        }
        
        # ‰øùÂ≠òÈªòË™çÈÖçÁΩÆ
        self.config_path.parent.mkdir(exist_ok=True)
        with open(self.config_path, 'w', encoding='utf-8') as f:
            json.dump(default_rules, f, indent=2, ensure_ascii=False)
        
        logger.info("Â∑≤ÂâµÂª∫ÈªòË™çÊò†Â∞ÑË¶èÂâá")
        return default_rules
    
    def validate_config(self) -> bool:
        """È©óË≠âÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºè"""
        try:
            schema = self.mapping_rules.get("validation_schema", {})
            if schema:
                jsonschema.validate(self.mapping_rules, schema)
            logger.info("ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈ©óË≠âÈÄöÈÅé")
            return True
        except jsonschema.exceptions.ValidationError as e:
            logger.error(f"ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈåØË™§: {e.message}")
            return False
        except Exception as e:
            logger.error(f"ÈÖçÁΩÆÊñá‰ª∂È©óË≠âÂ§±Êïó: {e}")
            return False
    
    def validate_data(self, data: Dict[str, Any], template_name: str) -> bool:
        """È©óË≠âÊï∏ÊìöÊòØÂê¶Á¨¶ÂêàÊò†Â∞ÑË¶èÂâá"""
        self.validation_errors.clear()
        
        templates = self.mapping_rules.get("templates", {})
        if template_name not in templates:
            self.validation_errors.append(f"Ê®°Êùø '{template_name}' ‰∏çÂ≠òÂú®")
            return False
        
        template = templates[template_name]
        fields = template.get("fields", {})
        
        # Ê™¢Êü•ÂøÖÈúÄÂ≠óÊÆµ
        for field_name, field_config in fields.items():
            if field_config.get("required", False):
                if field_name not in data or not str(data[field_name]).strip():
                    self.validation_errors.append(f"Áº∫Â∞ëÂøÖÈúÄÂ≠óÊÆµ: {field_config.get('description', field_name)}")
        
        # È©óË≠âÊØèÂÄãÂ≠óÊÆµ
        for field_name, value in data.items():
            if field_name in fields:
                field_config = fields[field_name]
                
                # È°ûÂûãÁâπÂÆöÈ©óË≠â
                field_type = field_config.get("type", "text")
                
                if field_type == "email":
                    if not self._validate_email(value):
                        self.validation_errors.append(f"'{field_name}' ‰∏çÊòØÊúâÊïàÁöÑÈõªÂ≠êÈÉµ‰ª∂Ê†ºÂºè")
                
                elif field_type == "phone":
                    if not self._validate_phone(value):
                        self.validation_errors.append(f"'{field_name}' ‰∏çÊòØÊúâÊïàÁöÑÈõªË©±ËôüÁ¢ºÊ†ºÂºè")
                
                elif field_type == "date":
                    if not self._validate_date(value):
                        self.validation_errors.append(f"'{field_name}' ‰∏çÊòØÊúâÊïàÁöÑÊó•ÊúüÊ†ºÂºè (YYYY-MM-DD)")
                
                elif field_type == "number":
                    try:
                        num_value = float(value)
                        if "min_value" in field_config and num_value < field_config["min_value"]:
                            self.validation_errors.append(f"'{field_name}' ÁöÑÂÄºÂ∞èÊñºÊúÄÂ∞èÂÄº {field_config['min_value']}")
                        if "max_value" in field_config and num_value > field_config["max_value"]:
                            self.validation_errors.append(f"'{field_name}' ÁöÑÂÄºÂ§ßÊñºÊúÄÂ§ßÂÄº {field_config['max_value']}")
                    except ValueError:
                        self.validation_errors.append(f"'{field_name}' ÂøÖÈ†àÊòØÊúâÊïàÊï∏Â≠ó")
                
                # ÈÄöÁî®È©óË≠â
                if "max_length" in field_config and len(str(value)) > field_config["max_length"]:
                    self.validation_errors.append(f"'{field_name}' Ë∂ÖÈÅéÊúÄÂ§ßÈï∑Â∫¶ {field_config['max_length']}")
                
                if "options" in field_config and value not in field_config["options"]:
                    self.validation_errors.append(f"'{field_name}' ÁöÑÂÄºÂøÖÈ†àÊòØ: {', '.join(field_config['options'])}")
                
                if "validation_pattern" in field_config:
                    if not re.match(field_config["validation_pattern"], str(value)):
                        self.validation_errors.append(f"'{field_name}' Ê†ºÂºè‰∏çÊ≠£Á¢∫")
        
        is_valid = len(self.validation_errors) == 0
        
        if is_valid:
            logger.info(f"Êï∏ÊìöÈ©óË≠âÈÄöÈÅé: {template_name}")
            print(f"‚úÖ Êï∏ÊìöÈ©óË≠âÈÄöÈÅé")
        else:
            logger.warning(f"Êï∏ÊìöÈ©óË≠âÂ§±Êïó: {template_name}")
            print(f"‚ùå Êï∏ÊìöÈ©óË≠âÂ§±Êïó:")
            for error in self.validation_errors:
                print(f"   üö´ {error}")
        
        return is_valid
    
    def _validate_email(self, email: str) -> bool:
        """È©óË≠âÈõªÂ≠êÈÉµ‰ª∂Ê†ºÂºè"""
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, str(email)) is not None
    
    def _validate_phone(self, phone: str) -> bool:
        """È©óË≠âÈõªË©±ËôüÁ¢ºÊ†ºÂºè"""
        # ÁßªÈô§ÊâÄÊúâÁ©∫Ê†ºÂíåÁâπÊÆäÂ≠óÁ¨¶ÂæåÊ™¢Êü•
        cleaned = re.sub(r'[\s\-\(\)\+]', '', str(phone))
        return len(cleaned) >= 8 and cleaned.isdigit()
    
    def _validate_date(self, date_str: str) -> bool:
        """È©óË≠âÊó•ÊúüÊ†ºÂºè"""
        try:
            datetime.strptime(str(date_str), '%Y-%m-%d')
            return True
        except ValueError:
            return False
    
    def generate_professional_pdf(self, data: Dict[str, Any], template_name: str, output_path: str) -> bool:
        """ÁîüÊàêÂ∞àÊ•≠Á¥öPDFÊñá‰ª∂"""
        try:
            output_path = Path(output_path)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # ÂâµÂª∫PDFÊñáÊ™î
            doc = SimpleDocTemplate(
                str(output_path),
                pagesize=A4,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=18
            )
            
            # Áç≤ÂèñÊ®£Âºè
            styles = getSampleStyleSheet()
            
            # ÂâµÂª∫Ëá™ÂÆöÁæ©Ê®£Âºè
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=20,
                spaceAfter=30,
                alignment=1  # Â±Ö‰∏≠
            )
            
            subtitle_style = ParagraphStyle(
                'CustomSubtitle',
                parent=styles['Heading2'],
                fontSize=14,
                spaceAfter=20
            )
            
            # ÊßãÂª∫ÊñáÊ™îÂÖßÂÆπ
            story = []
            
            # Ê®ôÈ°å
            template_info = self.mapping_rules["templates"][template_name]
            title = f"{template_info.get('description', template_name)} Â†±Âëä"
            story.append(Paragraph(title, title_style))
            story.append(Spacer(1, 20))
            
            # Âü∫Êú¨‰ø°ÊÅØ
            info_data = [
                ['ÁîüÊàêÊôÇÈñì', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
                ['Ê®°ÊùøÁâàÊú¨', self.mapping_rules.get('version', '1.0')],
                ['Ë®òÈåÑÊï∏Èáè', '1'],
                ['ÂêàË¶èÊÄß', 'Á¨¶ÂêàHIPAA/GDPRÊ®ôÊ∫ñ' if template_info.get('hipaa_compliant') or template_info.get('gdpr_compliant') else '‰∏ÄËà¨']
            ]
            
            info_table = Table(info_data, colWidths=[100, 300])
            info_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(info_table)
            story.append(Spacer(1, 30))
            
            # Êï∏ÊìöË°®Ê†º
            story.append(Paragraph("Ë©≥Á¥∞Ë≥áÊñô", subtitle_style))
            
            fields = template_info.get("fields", {})
            data_rows = [['Â≠óÊÆµ', 'ÂÄº', 'È°ûÂûã', 'Ë™™Êòé']]
            
            for field_name, field_config in fields.items():
                if field_name in data:
                    field_desc = field_config.get('description', field_name)
                    field_type = field_config.get('type', 'text')
                    field_value = str(data[field_name])
                    
                    # ÁâπÊÆäÊ†ºÂºèÂåñ
                    if field_type == 'boolean':
                        field_value = 'ÊòØ' if data[field_name] else 'Âê¶'
                    elif field_type == 'date':
                        try:
                            date_obj = datetime.strptime(field_value, '%Y-%m-%d')
                            field_value = date_obj.strftime('%YÂπ¥%mÊúà%dÊó•')
                        except:
                            pass
                    
                    data_rows.append([field_desc, field_value, field_type, field_config.get('example', '')])
            
            data_table = Table(data_rows, colWidths=[120, 150, 60, 120])
            data_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.navy),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('ALTERNATE', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('FONTSIZE', (0, 1), (-1, -1), 9)
            ]))
            
            story.append(data_table)
            story.append(Spacer(1, 30))
            
            # È†ÅËÖ≥‰ø°ÊÅØ
            footer_style = ParagraphStyle(
                'Footer',
                parent=styles['Normal'],
                fontSize=8,
                alignment=1
            )
            
            story.append(Spacer(1, 50))
            story.append(Paragraph("Ê©üÂØÜÊñá‰ª∂ - Ê≠§Êñá‰ª∂ÂåÖÂê´ÂÄã‰∫∫Èö±ÁßÅ‰ø°ÊÅØÔºåË´ãÂ¶•ÂñÑ‰øùÁÆ°", footer_style))
            story.append(Paragraph(f"Áî±PDFÊò†Â∞ÑÂô®Ëá™ÂãïÁîüÊàê - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", footer_style))
            
            # ÁîüÊàêPDF
            doc.build(story)
            
            logger.info(f"Â∞àÊ•≠PDFÁîüÊàêÊàêÂäü: {output_path}")
            print(f"‚úÖ Â∞àÊ•≠PDFÁîüÊàêÊàêÂäü: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"PDFÁîüÊàêÂ§±Êïó: {e}")
            print(f"‚ùå PDFÁîüÊàêÂ§±Êïó: {e}")
            return False
    
    def generate_statistics_report(self, data_list: List[Dict[str, Any]], template_name: str) -> Dict[str, Any]:
        """ÁîüÊàêÁµ±Ë®àÂ†±Âëä"""
        try:
            template_info = self.mapping_rules["templates"][template_name]
            fields = template_info.get("fields", {})
            
            stats = {
                "total_records": len(data_list),
                "template_name": template_name,
                "generated_time": datetime.now().isoformat(),
                "field_statistics": {},
                "validation_summary": {
                    "valid_records": 0,
                    "invalid_records": 0,
                    "common_errors": {}
                }
            }
            
            # Áµ±Ë®àÊØèÂÄãÂ≠óÊÆµ
            for field_name, field_config in fields.items():
                field_stats = {
                    "total_filled": 0,
                    "total_empty": 0,
                    "fill_rate": 0.0,
                    "unique_values": set(),
                    "field_type": field_config.get("type", "text")
                }
                
                for data in data_list:
                    if field_name in data and data[field_name]:
                        field_stats["total_filled"] += 1
                        field_stats["unique_values"].add(str(data[field_name]))
                    else:
                        field_stats["total_empty"] += 1
                
                if len(data_list) > 0:
                    field_stats["fill_rate"] = field_stats["total_filled"] / len(data_list) * 100
                
                field_stats["unique_count"] = len(field_stats["unique_values"])
                field_stats["unique_values"] = list(field_stats["unique_values"])  # ËΩâÊèõÁÇ∫ÂèØÂ∫èÂàóÂåñÊ†ºÂºè
                
                stats["field_statistics"][field_name] = field_stats
            
            # È©óË≠âÁµ±Ë®à
            for data in data_list:
                if self.validate_data(data, template_name):
                    stats["validation_summary"]["valid_records"] += 1
                else:
                    stats["validation_summary"]["invalid_records"] += 1
                    for error in self.validation_errors:
                        if error in stats["validation_summary"]["common_errors"]:
                            stats["validation_summary"]["common_errors"][error] += 1
                        else:
                            stats["validation_summary"]["common_errors"][error] = 1
            
            return stats
            
        except Exception as e:
            logger.error(f"Áµ±Ë®àÂ†±ÂëäÁîüÊàêÂ§±Êïó: {e}")
            return {"error": str(e)}
    
    def get_validation_errors(self) -> List[str]:
        """Áç≤ÂèñÈ©óË≠âÈåØË™§ÂàóË°®"""
        return self.validation_errors
    
    def list_templates(self) -> List[str]:
        """ÂàóÂá∫ÊâÄÊúâÂèØÁî®Ê®°Êùø"""
        return list(self.mapping_rules.get("templates", {}).keys())
    
    def get_template_info(self, template_name: str) -> Dict[str, Any]:
        """Áç≤ÂèñÊ®°ÊùøË©≥Á¥∞‰ø°ÊÅØ"""
        templates = self.mapping_rules.get("templates", {})
        return templates.get(template_name, {"error": f"Ê®°Êùø '{template_name}' ‰∏çÂ≠òÂú®"})
    
    def export_template_schema(self, template_name: str, output_path: str) -> bool:
        """Â∞éÂá∫Ê®°ÊùøÊû∂Êßã"""
        try:
            template_info = self.get_template_info(template_name)
            if "error" in template_info:
                return False
            
            schema = {
                "template_name": template_name,
                "description": template_info.get("description", ""),
                "version": self.mapping_rules.get("version", "1.0"),
                "exported_time": datetime.now().isoformat(),
                "fields_schema": template_info.get("fields", {}),
                "example_data": self.create_sample_data(template_name)
            }
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(schema, f, indent=2, ensure_ascii=False)
            
            logger.info(f"Ê®°ÊùøÊû∂ÊßãÂ∞éÂá∫ÊàêÂäü: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"Ê®°ÊùøÊû∂ÊßãÂ∞éÂá∫Â§±Êïó: {e}")
            return False
    
    def create_sample_data(self, template_name: str) -> Dict[str, Any]:
        """Ê†πÊìöÊ®°ÊùøÂâµÂª∫Ê®£Êú¨Êï∏Êìö"""
        samples = {
            "medical_form": {
                "patient_name": "Èô≥Â§ßÊòé",
                "patient_id": "P67890",
                "date_of_birth": "1985-03-22",
                "gender": "Male",
                "emergency_contact": True,
                "phone": "+886-2-9876-5432",
                "address": "Êñ∞ÂåóÂ∏ÇÊùøÊ©ãÂçÄ‰∏≠Â±±Ë∑Ø‰∏ÄÊÆµ123Ëôü4Ê®ì",
                "insurance_id": "INS123456789"
            },
            "employee_form": {
                "employee_name": "ÁéãÂ∞èËèØ",
                "employee_id": "EMP54321",
                "department": "IT",
                "position": "Software Engineer",
                "hire_date": "2024-01-15",
                "salary": 75000,
                "remote_work": True
            }
        }
        
        # Â¶ÇÊûúÊ≤íÊúâÈ†êÂÆöÁæ©ÁöÑÊ®£Êú¨ÔºåÊ†πÊìöÂ≠óÊÆµÈÖçÁΩÆÁîüÊàê
        if template_name not in samples:
            template_info = self.get_template_info(template_name)
            if "error" not in template_info:
                sample = {}
                fields = template_info.get("fields", {})
                for field_name, field_config in fields.items():
                    example = field_config.get("example")
                    if example:
                        sample[field_name] = example
                    else:
                        # Ê†πÊìöÈ°ûÂûãÁîüÊàêÈªòË™çÂÄº
                        field_type = field_config.get("type", "text")
                        if field_type == "boolean":
                            sample[field_name] = True
                        elif field_type == "number":
                            sample[field_name] = 100
                        elif field_type == "date":
                            sample[field_name] = "2024-01-01"
                        elif field_type == "select" and "options" in field_config:
                            sample[field_name] = field_config["options"][0]
                        else:
                            sample[field_name] = f"Sample {field_name}"
                return sample
        
        return samples.get(template_name, {})


def run_comprehensive_demo():
    """ÈÅãË°åÂÆåÊï¥ÁöÑÂ∞àÊ•≠ÊºîÁ§∫"""
    print("üöÄ Â∞àÊ•≠Á¥öPDFÊò†Â∞ÑÂô®ÂÆåÊï¥ÊºîÁ§∫")
    print("="*80)
    
    # ÂàùÂßãÂåñ
    mapper = ProfessionalPDFMapper()
    
    # ÈÖçÁΩÆÈ©óË≠â
    print("\nüìã 1. ÈÖçÁΩÆÊñá‰ª∂È©óË≠â")
    if mapper.validate_config():
        print("‚úÖ ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÊ≠£Á¢∫")
    else:
        print("‚ùå ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÊúâË™§")
    
    # È°ØÁ§∫Ê®°Êùø‰ø°ÊÅØ
    templates = mapper.list_templates()
    print(f"\nüìö 2. ÂèØÁî®Ê®°Êùø ({len(templates)}ÂÄã):")
    
    for i, template_name in enumerate(templates, 1):
        template_info = mapper.get_template_info(template_name)
        print(f"\n   {i}. {template_name}")
        print(f"      ÊèèËø∞: {template_info.get('description', 'ÁÑ°ÊèèËø∞')}")
        print(f"      È°ûÂà•: {template_info.get('category', 'general')}")
        
        fields = template_info.get('fields', {})
        required_count = sum(1 for f in fields.values() if f.get('required', False))
        print(f"      Â≠óÊÆµ: {len(fields)} ÂÄã (ÂÖ∂‰∏≠ {required_count} ÂÄãÂøÖÈúÄ)")
        
        # È°ØÁ§∫ÂêàË¶è‰ø°ÊÅØ
        compliance = []
        if template_info.get('hipaa_compliant'):
            compliance.append('HIPAA')
        if template_info.get('gdpr_compliant'):
            compliance.append('GDPR')
        if compliance:
            print(f"      ÂêàË¶è: {', '.join(compliance)}")
    
    # ÊºîÁ§∫ÊØèÂÄãÊ®°Êùø
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    all_results = []
    
    for i, template_name in enumerate(templates, 1):
        print(f"\nüîß 3.{i} ÊºîÁ§∫Ê®°Êùø: {template_name}")
        print("-" * 50)
        
        # ÂâµÂª∫Ê∏¨Ë©¶Êï∏ÊìöÈõÜÔºàÂåÖÂê´Â§öÂÄãË®òÈåÑÔºâ
        test_datasets = []
        
        # Ê≠£Â∏∏Êï∏Êìö
        normal_data = mapper.create_sample_data(template_name)
        test_datasets.append(("Ê≠£Â∏∏Êï∏Êìö", normal_data))
        
        # ÂâµÂª∫ËÆäÂåñÊï∏Êìö
        if template_name == "medical_form":
            variant_data = {
                "patient_name": "ÊùéÁæéÈ∫ó",
                "patient_id": "P99999",
                "date_of_birth": "1992-08-30",
                "gender": "Female",
                "emergency_contact": False,
                "phone": "+886-3-1111-2222",
                "address": "Ê°ÉÂúíÂ∏Ç‰∏≠Â£¢ÂçÄ‰∏≠Â±±Êù±Ë∑Ø‰∫åÊÆµ88Ëôü",
                "insurance_id": "INS999888777"
            }
            test_datasets.append(("ËÆäÂåñÊï∏Êìö", variant_data))
            
            # ÊúÄÂ∞èÊï∏ÊìöÔºàÂè™ÊúâÂøÖÈúÄÂ≠óÊÆµÔºâ
            minimal_data = {
                "patient_name": "Ë∂ôÂ∞èÂº∑",
                "patient_id": "P11111",
                "date_of_birth": "1988-12-01",
                "gender": "Other"
            }
            test_datasets.append(("ÊúÄÂ∞èÊï∏Êìö", minimal_data))
            
        elif template_name == "employee_form":
            variant_data = {
                "employee_name": "ÂºµÂ∑•Á®ãÂ∏´",
                "employee_id": "EMP99999",
                "department": "Marketing",
                "position": "Marketing Manager",
                "hire_date": "2023-06-01",
                "salary": 95000,
                "remote_work": False
            }
            test_datasets.append(("ËÆäÂåñÊï∏Êìö", variant_data))
        
        # ËôïÁêÜÊØèÂÄãÊ∏¨Ë©¶Êï∏ÊìöÈõÜ
        valid_data_list = []
        
        for dataset_name, test_data in test_datasets:
            print(f"\n   üìä Ê∏¨Ë©¶ {dataset_name}:")
            
            # È°ØÁ§∫Êï∏Êìö
            for key, value in test_data.items():
                field_info = mapper.get_template_info(template_name)["fields"].get(key, {})
                field_desc = field_info.get("description", key)
                print(f"      {field_desc}: {value}")
            
            # È©óË≠âÊï∏Êìö
            is_valid = mapper.validate_data(test_data, template_name)
            
            if is_valid:
                print(f"   ‚úÖ {dataset_name} È©óË≠âÈÄöÈÅé")
                valid_data_list.append(test_data)
                
                # ÁîüÊàêPDF
                pdf_filename = f"{template_name}_{dataset_name}_{timestamp}.pdf"
                pdf_path = f"data/output/{pdf_filename}"
                
                if mapper.generate_professional_pdf(test_data, template_name, pdf_path):
                    print(f"   üìÑ PDFÂ∑≤ÁîüÊàê: {pdf_filename}")
                    all_results.append({
                        "template": template_name,
                        "dataset": dataset_name,
                        "pdf_file": pdf_filename,
                        "status": "success"
                    })
            else:
                print(f"   ‚ùå {dataset_name} È©óË≠âÂ§±Êïó")
                all_results.append({
                    "template": template_name,
                    "dataset": dataset_name,
                    "status": "validation_failed",
                    "errors": mapper.get_validation_errors()
                })
        
        # ÁîüÊàêÊ®°ÊùøÊû∂ÊßãÊñá‰ª∂
        schema_path = f"data/output/{template_name}_schema_{timestamp}.json"
        if mapper.export_template_schema(template_name, schema_path):
            print(f"   üìã Ê®°ÊùøÊû∂ÊßãÂ∑≤Â∞éÂá∫: {template_name}_schema_{timestamp}.json")
        
        # ÁîüÊàêÁµ±Ë®àÂ†±Âëä
        if valid_data_list:
            stats = mapper.generate_statistics_report(valid_data_list, template_name)
            stats_path = f"data/output/{template_name}_statistics_{timestamp}.json"
            
            with open(stats_path, 'w', encoding='utf-8') as f:
                json.dump(stats, f, indent=2, ensure_ascii=False)
            
            print(f"   üìä Áµ±Ë®àÂ†±ÂëäÂ∑≤ÁîüÊàê: {template_name}_statistics_{timestamp}.json")
            print(f"      Á∏ΩË®òÈåÑ: {stats['total_records']}")
            print(f"      ÊúâÊïàË®òÈåÑ: {stats['validation_summary']['valid_records']}")
            print(f"      ÁÑ°ÊïàË®òÈåÑ: {stats['validation_summary']['invalid_records']}")
    
    # ÁîüÊàêÊºîÁ§∫Â†±Âëä
    print(f"\nüìã 4. ÁîüÊàêÊºîÁ§∫Á∏ΩÁµêÂ†±Âëä")
    print("="*50)
    
    demo_report = {
        "demo_info": {
            "title": "PDFÊò†Â∞ÑÂô®Â∞àÊ•≠ÊºîÁ§∫Â†±Âëä",
            "generated_time": datetime.now().isoformat(),
            "version": "1.0",
            "author": "PDF Mapper Demo System"
        },
        "system_capabilities": {
            "templates_available": len(templates),
            "validation_engine": "ÂÆåÊï¥Â≠óÊÆµÈ©óË≠âËàáÈåØË™§Â†±Âëä",
            "pdf_generation": "Â∞àÊ•≠Á¥öPDFÁîüÊàêÔºàË°®Ê†º„ÄÅÊ®£Âºè„ÄÅÊ†ºÂºèÔºâ",
            "compliance": ["HIPAA", "GDPR"],
            "logging": "ÂÆåÊï¥ÁöÑÊìç‰ΩúÊó•Ë™åË®òÈåÑ",
            "statistics": "Ëá™ÂãïÁµ±Ë®àÂàÜÊûêÂäüËÉΩ",
            "export_formats": ["PDF", "JSON", "Áµ±Ë®àÂ†±Âëä"]
        },
        "demo_results": all_results,
        "technical_features": {
            "data_validation": {
                "field_type_validation": True,
                "pattern_matching": True,
                "required_field_check": True,
                "range_validation": True,
                "custom_rules": True
            },
            "pdf_generation": {
                "professional_layout": True,
                "tables_and_styling": True,
                "multi_page_support": True,
                "chinese_support": True,
                "compliance_footer": True
            },
            "configuration": {
                "json_yaml_support": True,
                "template_inheritance": True,
                "validation_schemas": True,
                "extensible_fields": True
            }
        },
        "files_generated": []
    }
    
    # Êî∂ÈõÜÁîüÊàêÁöÑÊñá‰ª∂
    output_dir = Path("data/output")
    if output_dir.exists():
        for file_path in output_dir.glob("*" + timestamp + "*"):
            demo_report["files_generated"].append({
                "filename": file_path.name,
                "size_bytes": file_path.stat().st_size,
                "type": file_path.suffix[1:] if file_path.suffix else "unknown"
            })
    
    # ‰øùÂ≠òÊºîÁ§∫Â†±Âëä
    report_path = f"data/output/DEMO_REPORT_{timestamp}.json"
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(demo_report, f, indent=2, ensure_ascii=False)
    
    # Ëº∏Âá∫ÊúÄÁµÇÁ∏ΩÁµê
    print("üéâ Â∞àÊ•≠ÊºîÁ§∫ÂÆåÊàêÔºÅ")
    print(f"üìÅ ÊâÄÊúâÊñá‰ª∂Â∑≤ÁîüÊàêÂà∞: {Path('data/output').absolute()}")
    print(f"üìã ÊºîÁ§∫Â†±Âëä: DEMO_REPORT_{timestamp}.json")
    print(f"‚öôÔ∏è ÈÖçÁΩÆÊñá‰ª∂: {Path('config').absolute()}")
    print(f"üìù Êó•Ë™åÊñá‰ª∂: {Path('logs').absolute()}")
    
    print(f"\nüîç ÁîüÊàêÁöÑÊñá‰ª∂ÊëòË¶Å:")
    total_files = len(demo_report["files_generated"])
    total_size = sum(f["size_bytes"] for f in demo_report["files_generated"])
    print(f"   Á∏ΩÊñá‰ª∂Êï∏: {total_files}")
    print(f"   Á∏ΩÂ§ßÂ∞è: {total_size:,} bytes")
    
    file_types = {}
    for file_info in demo_report["files_generated"]:
        file_type = file_info["type"]
        file_types[file_type] = file_types.get(file_type, 0) + 1
    
    print(f"   Êñá‰ª∂È°ûÂûãÂàÜÂ∏É:")
    for file_type, count in file_types.items():
        print(f"      .{file_type}: {count} ÂÄãÊñá‰ª∂")
    
    print(f"\nüíº ÊáâÂæµÂ±ïÁ§∫Ë¶ÅÈªû:")
    print("‚úÖ ÂÆåÊï¥ÁöÑÊï∏ÊìöÈ©óË≠âÁ≥ªÁµ±")
    print("‚úÖ Â∞àÊ•≠Á¥öPDFÁîüÊàê")
    print("‚úÖ Â§öÊ®°ÊùøÊîØÊåÅ")
    print("‚úÖ Áµ±Ë®àÂàÜÊûêÂäüËÉΩ")
    print("‚úÖ ÂêàË¶èÊÄßËÄÉÈáè (HIPAA/GDPR)")
    print("‚úÖ ÂÆåÊï¥ÁöÑÊó•Ë™åË®òÈåÑ")
    print("‚úÖ ÂèØÊì¥Â±ïÁöÑÊû∂ÊßãË®≠Ë®à")
    print("‚úÖ ‰∏≠Ëã±ÊñáÊîØÊåÅ")
    
    return demo_report


def interactive_demo():
    """‰∫íÂãïÂºèÊºîÁ§∫Ê®°Âºè"""
    print("üéÆ ‰∫íÂãïÂºèPDFÊò†Â∞ÑÂô®ÊºîÁ§∫")
    print("="*50)
    
    mapper = ProfessionalPDFMapper()
    
    while True:
        print("\nüîß Ë´ãÈÅ∏ÊìáÂäüËÉΩ:")
        print("1. Êü•ÁúãÊâÄÊúâÊ®°Êùø")
        print("2. Ê∏¨Ë©¶Êï∏ÊìöÈ©óË≠â")
        print("3. ÁîüÊàêPDFÊñá‰ª∂")
        print("4. Â∞éÂá∫Ê®°ÊùøÊû∂Êßã")
        print("5. ÁîüÊàêÁµ±Ë®àÂ†±Âëä")
        print("6. ÈÅãË°åÂÆåÊï¥ÊºîÁ§∫")
        print("7. ÈÄÄÂá∫")
        
        try:
            choice = input("\nË´ãËº∏ÂÖ•ÈÅ∏È†Ö (1-7): ").strip()
            
            if choice == "1":
                templates = mapper.list_templates()
                print(f"\nüìö ÂèØÁî®Ê®°Êùø ({len(templates)}ÂÄã):")
                for i, template_name in enumerate(templates, 1):
                    info = mapper.get_template_info(template_name)
                    print(f"{i}. {template_name}: {info.get('description', 'ÁÑ°ÊèèËø∞')}")
            
            elif choice == "2":
                templates = mapper.list_templates()
                print(f"\nÈÅ∏ÊìáÊ®°Êùø:")
                for i, template_name in enumerate(templates, 1):
                    print(f"{i}. {template_name}")
                
                try:
                    template_idx = int(input("Ë´ãËº∏ÂÖ•Ê®°ÊùøÁ∑®Ëôü: ")) - 1
                    if 0 <= template_idx < len(templates):
                        template_name = templates[template_idx]
                        sample_data = mapper.create_sample_data(template_name)
                        
                        print(f"\nüìä ‰ΩøÁî®Ê®£Êú¨Êï∏ÊìöÊ∏¨Ë©¶ ({template_name}):")
                        for key, value in sample_data.items():
                            print(f"   {key}: {value}")
                        
                        if mapper.validate_data(sample_data, template_name):
                            print("‚úÖ È©óË≠âÈÄöÈÅé!")
                        else:
                            print("‚ùå È©óË≠âÂ§±Êïó:")
                            for error in mapper.get_validation_errors():
                                print(f"   üö´ {error}")
                    else:
                        print("‚ùå ÁÑ°ÊïàÁöÑÊ®°ÊùøÁ∑®Ëôü")
                except ValueError:
                    print("‚ùå Ë´ãËº∏ÂÖ•ÊúâÊïàÊï∏Â≠ó")
            
            elif choice == "3":
                templates = mapper.list_templates()
                print(f"\nÈÅ∏ÊìáÊ®°Êùø:")
                for i, template_name in enumerate(templates, 1):
                    print(f"{i}. {template_name}")
                
                try:
                    template_idx = int(input("Ë´ãËº∏ÂÖ•Ê®°ÊùøÁ∑®Ëôü: ")) - 1
                    if 0 <= template_idx < len(templates):
                        template_name = templates[template_idx]
                        sample_data = mapper.create_sample_data(template_name)
                        
                        if mapper.validate_data(sample_data, template_name):
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            pdf_path = f"data/output/interactive_{template_name}_{timestamp}.pdf"
                            
                            if mapper.generate_professional_pdf(sample_data, template_name, pdf_path):
                                print(f"‚úÖ PDFÁîüÊàêÊàêÂäü: {pdf_path}")
                            else:
                                print("‚ùå PDFÁîüÊàêÂ§±Êïó")
                        else:
                            print("‚ùå Êï∏ÊìöÈ©óË≠âÂ§±ÊïóÔºåÁÑ°Ê≥ïÁîüÊàêPDF")
                    else:
                        print("‚ùå ÁÑ°ÊïàÁöÑÊ®°ÊùøÁ∑®Ëôü")
                except ValueError:
                    print("‚ùå Ë´ãËº∏ÂÖ•ÊúâÊïàÊï∏Â≠ó")
            
            elif choice == "4":
                templates = mapper.list_templates()
                print(f"\nÈÅ∏ÊìáË¶ÅÂ∞éÂá∫ÁöÑÊ®°Êùø:")
                for i, template_name in enumerate(templates, 1):
                    print(f"{i}. {template_name}")
                
                try:
                    template_idx = int(input("Ë´ãËº∏ÂÖ•Ê®°ÊùøÁ∑®Ëôü: ")) - 1
                    if 0 <= template_idx < len(templates):
                        template_name = templates[template_idx]
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        schema_path = f"data/output/{template_name}_schema_{timestamp}.json"
                        
                        if mapper.export_template_schema(template_name, schema_path):
                            print(f"‚úÖ Ê®°ÊùøÊû∂ÊßãÂ∞éÂá∫ÊàêÂäü: {schema_path}")
                        else:
                            print("‚ùå Ê®°ÊùøÊû∂ÊßãÂ∞éÂá∫Â§±Êïó")
                    else:
                        print("‚ùå ÁÑ°ÊïàÁöÑÊ®°ÊùøÁ∑®Ëôü")
                except ValueError:
                    print("‚ùå Ë´ãËº∏ÂÖ•ÊúâÊïàÊï∏Â≠ó")
            
            elif choice == "5":
                templates = mapper.list_templates()
                print(f"\nÈÅ∏ÊìáÊ®°Êùø:")
                for i, template_name in enumerate(templates, 1):
                    print(f"{i}. {template_name}")
                
                try:
                    template_idx = int(input("Ë´ãËº∏ÂÖ•Ê®°ÊùøÁ∑®Ëôü: ")) - 1
                    if 0 <= template_idx < len(templates):
                        template_name = templates[template_idx]
                        
                        # ÂâµÂª∫Â§öÂÄãÊ®£Êú¨Êï∏ÊìöÈÄ≤Ë°åÁµ±Ë®à
                        sample_data_list = [mapper.create_sample_data(template_name) for _ in range(3)]
                        
                        stats = mapper.generate_statistics_report(sample_data_list, template_name)
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        stats_path = f"data/output/{template_name}_stats_{timestamp}.json"
                        
                        with open(stats_path, 'w', encoding='utf-8') as f:
                            json.dump(stats, f, indent=2, ensure_ascii=False)
                        
                        print(f"‚úÖ Áµ±Ë®àÂ†±ÂëäÁîüÊàêÊàêÂäü: {stats_path}")
                        print(f"üìä Á∏ΩË®òÈåÑ: {stats['total_records']}")
                        print(f"üìä ÊúâÊïàË®òÈåÑ: {stats['validation_summary']['valid_records']}")
                    else:
                        print("‚ùå ÁÑ°ÊïàÁöÑÊ®°ÊùøÁ∑®Ëôü")
                except ValueError:
                    print("‚ùå Ë´ãËº∏ÂÖ•ÊúâÊïàÊï∏Â≠ó")
            
            elif choice == "6":
                print("\nüöÄ ÈÅãË°åÂÆåÊï¥ÊºîÁ§∫...")
                run_comprehensive_demo()
            
            elif choice == "7":
                print("üëã ÊÑüË¨ù‰ΩøÁî®PDFÊò†Â∞ÑÂô®Â∞àÊ•≠ÊºîÁ§∫Á≥ªÁµ±ÔºÅ")
                break
            
            else:
                print("‚ùå ÁÑ°ÊïàÈÅ∏È†ÖÔºåË´ãÈáçÊñ∞ÈÅ∏Êìá")
                
        except KeyboardInterrupt:
            print("\n\nüëã ÂÜçË¶ãÔºÅ")
            break
        except Exception as e:
            print(f"‚ùå ÁôºÁîüÈåØË™§: {e}")


if __name__ == "__main__":
    print("üöÄ PDFÂ≠óÊÆµÊò†Â∞ÑÂô®Â∞àÊ•≠ÊºîÁ§∫Á≥ªÁµ±")
    print("="*80)
    
    # Ê™¢Êü•ÂëΩ‰ª§Ë°åÂèÉÊï∏
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "--interactive":
            interactive_demo()
        elif sys.argv[1] == "--help":
            print("\n‰ΩøÁî®ÊñπÊ≥ï:")
            print("  python complete_demo.py           # ÈÅãË°åÂÆåÊï¥ÊºîÁ§∫")
            print("  python complete_demo.py --interactive  # ‰∫íÂãïÂºèÊ®°Âºè")
            print("  python complete_demo.py --help    # È°ØÁ§∫Âπ´Âä©")
        else:
            print(f"Êú™Áü•ÂèÉÊï∏: {sys.argv[1]}")
            print("‰ΩøÁî® --help Êü•ÁúãÂèØÁî®ÈÅ∏È†Ö")
    else:
        # ÈªòË™çÈÅãË°åÂÆåÊï¥ÊºîÁ§∫
        run_comprehensive_demo()